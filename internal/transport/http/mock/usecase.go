// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/peterstirrup/messages/internal/transport/http (interfaces: UseCases)

// Package mock_http is a generated GoMock package.
package mock_http

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "github.com/peterstirrup/messages/internal/messages/entities"
	reflect "reflect"
)

// MockUseCases is a mock of UseCases interface
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// GetWhatsAppContacts mocks base method
func (m *MockUseCases) GetWhatsAppContacts(arg0 context.Context, arg1 int64) ([]entities.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWhatsAppContacts", arg0, arg1)
	ret0, _ := ret[0].([]entities.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWhatsAppContacts indicates an expected call of GetWhatsAppContacts
func (mr *MockUseCasesMockRecorder) GetWhatsAppContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWhatsAppContacts", reflect.TypeOf((*MockUseCases)(nil).GetWhatsAppContacts), arg0, arg1)
}
